welcome my name is David men and this is cs50 and this is not your typical high school computer science course this course is a little something special and that's not because I'm teaching it but because this is one of we like to think those rare course is that actually squeezes your brain so much and your schedule so much that by semester's end you gen Ely feel smarter so that was the way I felt when I myself took this course back in 1996 I was a government major at the time here living in MA house and I as as are the other the five others here so I was a government major at the time and I was a government major because I had always liked history I'd
Why I took CS50 like constitutional law in high school and so I set off on this path freshman year doing what I knew best doing what I knew I liked and yet I'd always been a bit of a geek I'd always dabbled with computers but I I myself perhaps Ironically in retrospect always viewed the guys who were taking computer science uh in my high school my friends as the real Geeks and yet finally did sophomore year I take this little course called cs50 which actually had scared me away my own freshman year and I was a user assistant at the time so I was certainly already qualified at least to be among uh those uh those Geeks Who who I made fun of in high school
My experience with CS50 but um I was scared there was it had this reputation at the time and perhaps still in part that it was a it was a scary course it was a lot of work it was hard and yet it's one of those things where my God the the uh bark was far worse than its bite I found myself sophomore year for the first time actually finding homework fun and I'm not saying this just to pitch this course to you this was a genuine realization for me now I think at one point I did cross the line to True geekdom uh where I actually used to look forward to Friday nights because I could curl up in front of my little MacBook and uh work on cs50's problem sets so at that point I think I had clearly cross the line and our goal in this course is not to turn all of you into uh that person but just to say that there's a little something special about this course a little something about special about computer science in general especially these days so the more acclimated we've all gotten to technology the more toys we carry around in our pockets that are themselves computers I mean my iPhone is actually a higher performing computer than my laptop was in college you can do a lot of neat things with these things and now
Shuttle Boy most of us in this room probably just use other people's software other people's tools other people's solutions to problems because we go to iTunes we download some app from the App Store and voila we can do something really neat but by the end of this semester you can be the person doing that problem solving you can be the person solving some problem building that app that piece of software that tool that either one just amuses me amuses you for instance controlling say your iTunes library from with your an apartment clearly an app that already exists or you can find shuttle schedules more easily for instance so in fact one of the very first things I did after taking cs50 was again it was probably at this point Friday nights and Saturday nights um there was this this opportunity at the time where Harvard was running shuttle buses and to this day they still have these printed schedules but there was really no means online of finding out when the next shuttle was now I didn't care cuz even though I lived in Mather I wasn't among those who generally took the shuttle but had a lot of friends in fho for instance and one of them asked me I think at one okay Foo is better than NE apparently so one of my friends kind of got me thinking maybe I can write a little program to help my friends check the shuttle schedules and thus was born the awkwardly named shuttle boy this this piece of lexicon that has stayed around for some number of years at least among some of the upper classmen at the time this was this little command line program similar in spirit to Dos it was running in a Unix environment so it wasn't very sexy at all you just a couple commands and it told you when the shuttles were well these days it's a
Shuttle Boy Mobile little more sophisticated and it's actually representative of precisely the types of projects that students in this course end up making by terms end so this is version four some 15 years later of shuttle boy seems uh Google Maps is being a bit slow there but for those of you who have to get out of here after class and go say from Memorial Hall and need to go up to say the quad well you can either leave in two minutes if this really isn't working for you just yet or you have as many other options as you might like and coming soon we can pitch this from cs50 will be the same capability via SMS you can text shuttle booy via phone you can call shuttle booy uh cs50's phone number this year will amazingly this was available 617 bug cs50 uh so that will debut soon don't call it just yet cuz I've gotten uh reprimanded for right now it's being uh routed to our assistant head teaching fellow's cell phone so you'll just get him if you have questions about the shuttle schedule for now but that will soon be implemented so other things actually
Campus Events that we ourselves spent this summer on really in preparation for this semester was a whole bunch of other problems that we wanted to solve so for instance there's a whole lot of stuff that goes on this campus on a given day and in fact put another way there's a whole bunch of stuff going on at this campus that I certainly never take advantage of and even though I am now overwhelmed with how many things uh that are going on on campus I still seem never to find the time but voila even there cs50's lecture that's where you is so this was a imp uh this was a program we wrote to aggregate all of the events on campus and this has been something that other students in this same course have tackled on their own and we've been working with other entities on campus to really make this happen but the point to cs50 this term is that all of these little programs we've been working on whether this one or whether one for aggregating all of Harvard's news in one place all Google news all of these things are going to have what are called apis application programming interfaces and this is just fancy speak for the capability of of letting other people people in this room actually doing
Final Projects something with that same data so by terms end if you decide to implement a final project related to news or events or Maps well we at least as a course will make that all the more easy this year by providing you with an interface a set of functions so to speak software that you can use in your own projects to go be above and beyond where students perhaps have gone in terms past because this framework has not been in place for them and again this all began for me at least uh some 15 years ago implementing shuttle boy I then emailed my friend Ken in Foo I said hey what do you think is this useful he emailed it out on the fho open list and vo all these years later I'm apparently still milking this project but the neat thing about it and this is where too a course like this in engineering and computer science is I think a little special is that when you do your homeworks and when you do these projects in this course you know many of them yes you'll put aside and not really use again but some of it you will and there's this really powerful thing at least for me this really exciting thing when you make something and other people actually care other people don't just smile and Pat you on the back and then
Goals sort of go about their own lives they actually use what you made in their own lives even if it's for something as silly or as simple as just finding when they can get out of here to catch the next shuttle to the quad so by terms Zen that's one of the goals for this course to empower you guys to just Identify some problem whether it's on campus or hopefully well beyond campus and actually use your own skills your own mind and solve that problem in some part technologically so this is also a course as we say in the syllabus and in the course's official description that teaches you how to think and it teaches you how to solve problems more efficiently well what does that mean well when you've got 600 megahertz in your pocket or 3 gigahertz under your desk at home you can solve a lot of problems efficiently just by sheer Brute Force but there's a lot of problems in this world whether it is searching say Facebook's Network or the internet via Google that it doesn't matter how fast your particular computer is there's no way in hell you're going to search billions of web pages quickly unless you actually approach this problem
Algorithms intelligently you don't just search for instance a huge list of all the web pages on Earth from top to bottom looking for something related to whatever Search terms you're looking for hopefully Google and presumably Google and Facebook and any of these large entities have a lot of smart people thinking about how they can find data more quickly how they can process information more efficiently and how they can just generally return results more quickly so that you can do yet more interesting things with these devices and so what do we mean though by uh how teaching people how to think more carefully more algorithmically well this little visual always seems to go over well and it seems to be memorable and I was even asked just yesterday by a former student oh are you going to do the the phone book thing again and I I pretty much on the spot decided all right sure we'll do the phone book thing and he asked me when you you tore it in half right I was like well yeah technically we tore it in half but not in the way this in the computer science way will I be able to tear this thing in half and and so here was the problem that we've presented for some time so here's a phone book it's got at least a
Phone Book thousand or so pages and the simple go hand very real world is to find say a person in here so Mike Smith last name starting with s so I'm a typical human I pick up this phone book and anyone out there what would you a typical person do to start finding Mike Smith obviously not knowing in advance what page he is actually on all right so you go roughly in the middle right and at this point in the story I'm probably in the M's or ends you know roughly halfway through the phone book turns out the last time I did this example I somehow found myself in the escort section so it's actually not equally balance between a through M and N through Z but today we are in fact in the M's all right so now I'm at the M's but what's my takeaway now just as a normal human off the street where do I go next for Mike Smith right so it's he's probably on this half right because s comes after M and so here in lies the visual drama that's not really tearing it in half right I kind of cheated down the center but but uh we now know that Mike is at least not in that half we can literally throw half of the problem away and I've left with a problem that's fundamentally still the same thing find Mike Smith in a really big book but the problem is now half as large if it had a thousand Pages before now it's got 500 you know what I can do the same thing again I can kind of recursively or repeatedly do the same thing now I'm not quite at s I'm at T and so oh I went a little too far but I know now that Mike is not to the right there's going to be some class someday where I just can't tear the damn thing I bet but now I know he's not to the right so now the problem has been quartered so I've gone from a thousand to 500 to 250 pages and again if you continue the logic continue the mathematics I'm chopping this problem in half in half in half until finally I'm either going to not find any Smiths at all unlikely or I'm going to find the one I'm looking for but that then begs the question is this any better than the simple approach of just saying you know a no b no starting from left to right going linearly through the book well instinctively yes it's going to be a lot faster but how much less well if I have a thousand page phone book or maybe let's say 1,24 for those of you who like powers of two well how many times might I have to split this problem in half before finding Mr Smith so 10 right if you have 1,24 pages and you split them in half and half and half and half I do that 10 times which means I go from a thousand pages to the person I'm looking for and just P page turns now that's kind of neat but you know if you think about it you've been doing this all of your life not that dramatic but now suppose the phone book isn't just for Boston it's for the entire us or the entire world and this thing has billions of pages in it imagine a phone book with four billion Pages how many page turns am I going to have to do maximally to find Mike Smith in a 4 billion page phone book now so yeah if you're kind of right the math type is this is log base 2 but if you think 4 billion to 2 billion to 1 billion to half a billion I mean that actually uh goes uh whittles itself down pretty darn fast and in fact within 32 the Googles of the world the Facebooks who have the luxury of having huge data sets you've got to approach these problems in this way otherwise it's simply not going to work well what uh what did this student actually recall I doing uh we like to do things that are little bit silly sometimes to sort of take the edge off of what is otherwise a lot of new material and so he actually this former student sent me this link which I went ahead and just for kicks and then regretted it at the end uh pulled up on YouTube here so I thought I would share what a non-computer scientist means when he tears a phone book in
Pot Pocket Technique half I'm back uh we're going to get into some legitimate Fook gripping a lot of the guys they they tricky and think the ri form books by folding it and then bursting down on top of it which is called the pop the popping technique and uh I basically rip phone books just with legitimate gripstick alone so let's give it a try [Music] [Applause] [Music]
Example [Applause] here we go 1,500 Pages nice clean line legitimate ter so I suppose his way works too so so what I got out of this course all those years ago was yes shuttle boy and then yes a degree in computer science and then yes a PhD in computer science and that's not what we're trying to turn most students in this course into most of you in this course are not going to go on in major in computer science some of you might minor but for some of you this will be a terminal course and that's perfectly fine because this course is in fact structured in a way where even if you just pay your dues for several months and you really focus in and you really uh take as much out of this course as you can you will in fact be well equipped to go back to your world of Economics biology psychology applied math and actually make use of
Last Years Comments what is ultimately as interesting a course we hope conceptually as it is fundamentally practical and that too is something that's perhaps a bit rare to find I thought I'd share a few comments that students from uh last fall put in this past Year's Q guide when asked about what would you like to tell future students well if you haven't already looked at these comments one student said this course will take a fair amount of your time up but if you put your work into a whole new world a if you put the work if you put the work into all right so this is Sig grammar not mine so if you put put in the work A Whole New World will open up to you amazing how much I learned in only 12 weeks another student wrote you better take this or you're going to regret it another wrote a little more bluntly it will kick your ass and leave you feeling great and then finally this one is perhaps something I can only show in writing but uh second from the bottom here so I'm not sure if you have many friends who took this course but um we kind of did a lot of damage to last year's students um we introduced at the start of several lectures few quizzes couple problems that's this notion of L cats uh you can't see what I can see here but in a moment you will see a young man named happy cat who is the leader of the so-called L cats um this is one of these stupid internet forwards that uh I think frankly the dichotomy between these two gentlemen here and what we now have this on the screen is perhaps a one of the most inappropriate uses of this theater to date and why don't we make a little more real a little more personal this notion of actually solving a problem more efficiently a simple problem on day one of any school is to sit down or stand up and start counting the students right roll call of sorts well the most naive but nonetheless very correct approach that I a teacher could take is 1 2 3 4 five 6 s and we'd be here quite some time so what's a
Linear speedups marginal Improvement on this even that you might have done as a kid how do you count people faster and don't start reading off my own instructions what would you have done as a kid start counting in twos right like I'm so I'm pretty good at 2 4 6 8 10 12 so that's something interesting right now how much of an improvement is that there so it's obviously a factor of two it takes me half as much time but you know what as we'll find throughout the semester big deal like speeding up your running time by just a factor of two is not all that interesting because if the analog here in the computer world is that I'm a CPU I'm a computer well heck if I just wait 12 months 18 months I the computer will just be able by Nature by the number of gigahertz I have in me to be able to count people in this room faster so these kinds of con these kinds of linear speedups like factor of two factor of three even factor of 10 who cares right we can throw Hardware at that problem we can wait things out we can develop faster machines but intellectually yeah that was kind of clever but it didn't really fundamentally change the problem I'm still going from left to right front to back it's really the same algorithm but I offer that we can do better we can do smarter than this and do fundamentally a faster implementation but to demonstrate this we need you to humor Us for just a moment and it's at this point where it been me talking less and you talking more but I do need you to execute step one together which is if you would humor Us please stand up the directions here on the board you now are okay a couple of you have to sit down those of you in back there we go all right thank you uh so you the program here is before you you are now the computers executing this program it's fairly self-explanatory at this point yes you should be number one get it right many of you are probably thinking this already anyway first freshman year so think to yourself you're the number one so step three here
Sanity check pair off with someone standing add your two numbers together and adopt that sum as your new number and we'll do a sanity check do you know how many we have do you know where jansu is uh no she might be out cutting the cake you want me to get her just we need to have a answer key yeah
Final tally this point the algorithm should be winding down you're 79 I'm 791 I'm of you maybe we should have gone with my Approach after all 163 arithmetic in front of 300 plus people
Final answer what's our final tally going to be6 386 386 and are you the last one standing is that everyone you know do you know what the answer is do you know what the answer is we didn't bring an answer key with us so 386 is in fact precise ly the right answer for the first time that's okay very very nicely done so what was the takeaway CU that definitely felt a little slower than my very simple but nonetheless very correct approach of just going onesies and twosies and just getting it done with from left to right but what did we really just do there well if there were roughly let's say 400 of you standing at one point and then half of you very quickly from what I could tell wanted to sit down so half of you sat down we went from 400 to 200 then to 100 then to 50 then to 25 so again that there's that same divide and conquer idea that we had with the phone book again with every iteration we have the size of the problem we haveed it we haveed it so in theory your algorithm should have been much faster than my linear approach because my Approach would have taken say 400 steps or maybe if I'm slightly clever 200 steps but yours would have taken far fewer right from 400 to 200 20050 25 13 6 so fewer than 10 steps in the end versus my 200 or 400 and there's the germ of a really interesting idea and yes mathematically what you did just did was something that's a little logarithmic in nature by log base 2 we divide it in two and two again and we'll revisit this later in the semester but there in lies again a very intelligent implementation and we are just scratching the surface of the very clever the very uh intelligent efficient approaches to problems that we might ultimately solve so who are the people you just uh chatted with if briefly a
Who are you common concern in a course like this is that everyone to the left of you and everyone to the right of you must clearly know more than you well that's absolutely not the case and in fact in recent years this course has made a concerted effort to reach out to those less comfortable so to speak and by that we mean not people who have never touched a computer before CU that's really hard to find around here these days but folks who use email use Facebook maybe even right now but are not necessarily quite sure what to do when something goes wrong or when they are asked about anything technological you know the hands go up or they kind of push the hardware to a friend who's perhaps more versed in it than they well these are some statistics from last year's semester so when asked uh when we asked our 400 so students last year you know what is your level of comfort coming into this class well 34% wrote themselves down as among those less comfortable so if you have come into the this room and are still thinking now that you know what this term less comfortable describes me know that you were in very good company but realize too if you're coming into this course with the backgrounds in a computer science and you were really that geek in in middle school and high school who was writing code and teaching yourself languages well that's fine too because there's definitely a non-trivial sized audience with that background as well about 133% last term and then there's everybody else sort of someone who doesn't think they're less comfortable they definitely don't think they're more comfortable but they're just in a course to get something out of it so realize that this course does draw quite the spectrum of students and to put this in more concrete terms 71% of students last year had zero courses behind them so if you're entering this course thinking oh everyone who takes cs50 was a computer science Wiz in high school it's not the case most people are presumably just interested in it and a few yes absolutely have taken some courses some uh at least one person last year had taken five courses previously so we definitely have some outliers but again the meat of the curve is in those lower values Al together and another
Gender ratio interesting statistic we shared over the past couple of years is the gender ratio so historically at least in computer science there is a bit of a male female skew a couple of years ago it was much more marketed than last year so we're almost now at the 40% level and if I can throw down a gauntlet just for the sake of having a third pie chart next year that's even more Equitable I would point out that there's absolutely no reason from the courses perspective that males and females shouldn't be enrolling in this kind of course in relatively equal numbers and realize too 38% 48% we're actually quite pleased to see that we're almost at that at least uh statistically even value of 50% so if you are in fact female do rest assured too that this is not in fact a Mal dominated class well this just so happens to be cs50's uh 20th birthday uh I well thank [Applause] you that's very nice of you uh cuz we brought cake for you actually and so when you exit here later today you'll actually get a chance to meet uh many of the courses teaching fellows who will be lingering in the hallway and yes it'll
Cake be a nice uh sort of uh incentivized way of meeting the teaching fellows but we did take a trip up to uh a little Bakery and again consistent with the coures playful nature while nonetheless expecting a non-trivial amount of work while we're having that fun well we do have one of these cakes for you so if you're laughing that's actually good because even if you're among those less comfortable you're at least aware of it um those of you in the 14% might prefer this flavor and then if you don't know what the hell is going on right now we also have this for the rest of [Applause] you so those are being chopped up into pieces outside as we speak so again let's take things up a notch and and at least introduce some basic tenant that we'll then take for granted in the random of the semester so we all probably know that uh computers UL Ely boil down somehow to zeros and ones
Bits these things called bits what does that mean well you can think of it frankly as a light bulb a bit is a light bulb it's either on or it's off it's a switch it's either on or it's off now computer scientists generally think of off as the number zero arbitrarily and the number and the notion of on as one so if you throw a light switch on that's a one turn it off that's a zero or equivalently turn the light on that's the value of true turn it off that's a value of false so these are just synonyms but at the end of the day yes all computation all stuff that goes on underneath the Hood in a computer does ultimately boil down to zeros and ones and when you stop to think about it it's pretty damn remarkable what the world has done with these basic building blocks including some of the devices you're holding in your hands well why are zeros and ones useful my God even in the real world we at least have 10 digits 0 through nine why so limited well in Hardware terms it's very easy it's much easier to represent two states right if computers are plugged into the wall usually you kind of have this easy source of uh binary nature it's either on or off electricity is Flowing or it's
Binary not so that's kind of one of the initial reasons that the world went with just zeros and ones and computers but you can use them as building blocks so this actually is a little small on the screen here but we can count in binary we can represent anything we want in binary just as we can say decimal just as we can even in fact with alphabetical letters and so here's the quick system in just a couple minutes time you'll now know how to count how to write how to speak binary much like your your own laptop well you have in the world of binary sort of just like Grade School uh columns or values so in grade school we learned this is the ones column this is the tens column the hundreds columns and so forth in other words Y is the number we know as 123 the number 123 well my teacher taught me this was the ones column this was the tens this was the hundreds well what did that mean well to figure out what the total value is of what is otherwise this string of digits just hash marks on the board well we have 1 100 so that's 1 * 100 and then plus what 2 10 so that's 2 * 10 plus 3 1 so that's 3 * 1 and okay so I seem to have gotten back where I started but this very simple process of just multiplying the digits by the value of the column is exactly what binary is all about but in binary you use powers of two not powers of 10 so here's a series of eight light bulbs computer scientists like to use values like two and 8 and 16 and 24 and 32 cuz they're all uh generally convenient values to use so when we talk about eight values in sequence this is that thing called the bite and these days we rarely talk in just bytes we talk megabytes gigabytes even terabytes these days but it's all ultimately the same thing here's 8 Bits AKA one by just simple jargon so all of these light bulbs are off so the math is actually really easy so there on the right cuz though it's small to see is the ones column the twos the fours the eights the 16s 32 64s 128s right maybe it's hard to memorize at first but it's just multiply by two from right to left so you can always recreate this well they're all off so that's 0 time placeholder 0 time placeholder so this is the number uh zero represented in binary in other words how do you write the number we know as zero in binary well 1 2 3 4 5 6 78 and technically just like in decimal all of these leading zeros they don't add anything to the the formula they're just there because we arbitrarily decided we want eight of these things in a row right if they're physical objects we have eight so they've got to all be off but we could have just gotten away with one zero well how do you represent the number one well instinctively you're going to throw one of the switches you're going to turn a bulb on so there is the number one because we now put a one a light bulb that's on in the ones position how are we going to represent two well we actually have to throw two switches now at least versus this state we have to turn on the two's column turn off the one's column and now we have the value of one in the two's column so that's the total value of two now a quick mental exercise what's going to happen with the next sequence how do I present the number three well I need one from the two's column one from the thre's column and aha so now I've incremented that one and now this same basic pattern repeats what's the number four well let's see I just need a one in the fours column and then zeros and the twos and ones so then it continues in that way and it's just this sequence of steps so the notion of binary is really not all that complicated at the top there we have eight zeros below that we have seven zeros and a one below that we have six zeros a one and a zero and that's binary now thankfully we computer scientists you programmers by terms in are not going to often be writing in binary talking in binary thinking in binary because we've built many layers of abstraction on top of that in fact people rarely talk about bits except in a networking context they talk about bites because one bit not that useful eight bits these days still not that useful but at least eight bits one bite is at least getting us toward more useful units of measure but when we start looking underneath the hood when we do certain problem sets and look at files and look perhaps at Network traffic it will become interesting to know how you're representing data because you're going to have to figure out how to display that same information and in fact we if we only have zeros and ones how do we go about representing say uh alphabetical letters well we're going to have to have some mapping between binary and letters but that's that's as of yet unclear but to hammer this point home and to give me a break from speaking at I thought I'd pause for a moment and see if we can't recruit eight volunteers one bite eight people can I get eight people for whom it is not too awkward to come on up good good 1 2 3 4 five six seven eight very enthusiastic eight come on down so you all for just a moment here oh and you have to be uh willing to now be on the internet cuz there is in fact a camera in the back of this room so turn back now if you don't want to be on the in Hello mom in perpetuity so let's see you here will be the 128 column and let me ask that you simply hold this before you and actually if you could scooch this way just a little bit then I will get out of your way you'll be the 64's column you shall be the 32s column and the 16s 32s 16s eights fours twos and ones all right so perfectly lined up with the holders from before but we need a little bit of mapping so a quick setup we just need an arbitrary way of mapping binary numbers which really can be converted very easily to decimal numbers so we need a way of converting numbers to letters if our computers are actually going to show us emails or let us type URLs or actually display non-numeric information and in fact there is a system for that it's called ASI uh an acronym that uh whose meaning is not so interesting but whose uh whose utility is this is just a mapping from letters to numbers and there's actually a lot more numbers on the screen and you guys don't worry aren't going to have to test yourselves with this in just a moment but there's a mapping between numbers and letters and I'm just going to get us started by pointing out a couple of these the numbers of Interest right now are going to be oops are going to be this whoops so in this column here I can't seem to zoom in simultaneously we have decimal deck for decimal and then we have the character on the right hand side so if I hop over into this column though it's a bit small on the screen the number 65 represents present what letter capital A and the number 97 lowercase a all right so with those two alone right so do not go home and try memorizing asky chart come quiz time do not try memorizing an asky chart memorize two 65 is capital a 97 is lowercase a and from there can you bootstrap yourself to all of the other alphabetical characters but all this chart says and I just downloaded this chart from ask.com this is a standard that's been around for many many many years but most computers still use it what we now have is a means of encoding alphabetical information using what's ultimately numeric so if these guys are just switches light bulbs computers we can actually convey messages so each of you has some hints on the back we're going to have three rounds here where these guys are going to spell out in English in aski a very short message a three-letter word uh it will involve them either raising their hand thereby representing a one or just standing there awkwardly thereby representing a zero so why don't we proceed to immediately with round one and you can either raise or not raise your hands so the audience doesn't get off the hook what number first of all are they currently representing 66 right not hard cuz we have a one a hand up in the 64s column a hand up in the two's column 64 * 1 plus 2 * 1 is 66 they're representing the number six which means the first letter is B so not too bad all right round two first letter was a b [Music] 79 can someone second that yes all right so 79 which means it's now an O So B okay b o there's a third letter actually that is kind of yeah third round third and final round what number is this I heard an 87 someone else agree all right so yes so this is in fact 87 which Maps too and this is the very C clever setup at which point you all B is bow very good so actually besides that little souvenir they weren't very that was not a very enthusiastic Applause so I'll take care of you so we do have a little something for these guys here now that they've just appeared on sander stage doing perhaps the geekiest thing they could so uh maybe if we could humor them if only cuz I'm feeling a little awkward now a little round of applause for these guys here thank you thank you you want no all yours all right thank you very much so so it turns out that um you know we can take this one step further right you are now entering a community of people who understand things like this it's slowly spreading yes it's not cool that you understand this now right so we've already done some damage here today but yes there is now such thing as geek humor that you might at least catch a little bit more onto so what are we going to do throughout this semester so there's 12 weeks zero index so 13 weeks in total you'll find throughout the semester that computer scientists tend to count starting from zero from for reasons that will soon become clear but what we're going to do this week starting this Friday is introduce you to programming now you may already be coming at the course with a background in the and that's perfectly fine but we'll also be able to introduce
Programming Environment some more sophisticated topics that are typically covered things like events and threading so just a toss out a couple of buzzwords for those unfamiliar but what we're going to do is not dive into what's a typically traditional language like Java or C++ or c u catchphrases that you might have heard in the past but we're going to use a programming environment a graphical programming environment that was actually developed by mit's media lab and this is an environment that allows you to program quite literally by dragging and dropping puzzle pieces that fit together logically in a way that lets you implement these things called loops and conditions and bullying expressions and you can actually on day one after this Friday write a program that actually some of your friends might care about so in yester year or when you've taken say a computer science course in high school odds are one of your first programs was the equivalent of hello world like wow Mom I just made the computer type some characters on the screen it's a very underwhelming experience much more interesting is it to implement a little something like this as one of last year's students did so I give you the work of a former classmate it's a love story of sorts about dancing [Music] cookies say hey [Music] I can't see me Ling nobody but you for all my life when you will be baby the skies will be blue for all my life you and you and me no matter how it toss the dice it had to be the only one for me is you and you for me so happy together so happy together and how is the WEA [Music] [Applause] together so this was was actually from a student who had never programmed before and just to give you a teaser of this interface and we're only going to use this for one week time really to get the Comfort levels up and to get folks excited about what you can actually make these machines do this is an environment where you'll be programming by for at least a week just dragging and dropping puzzle pieces that fit together as we'll see in a logical fashion and it lets you do fun if silly things quickly and for any of you who are a little bit familiar with things like Java and C++ it's usually a good semester or two or three before you finally get to start writing something that another person might actually enjoy watching well in week one of the course or the second week zero index will we dive into a more traditional environment in this course we'll spend much of our time on a language called C uh this is one of the earliest languages that unlike Java actually gives us much greater access for better for worse to manipulating hardware and actual memory and we can do a lot of damage with that in fact anytime you read of web servers being exploited or computers being hacked into very often to this day is it the result of people having run software in a language called C or C++ without sufficient care given to what are called buffer overruns or uh lengths of arrays so some fairly technical Concepts that are not that hard to understand but there's been a lot of humans being making a lot of mistakes for years and with this language will actually understand some of those security imple uh implications but each week typically we'll introduce also an interesting domain that will inspire that week's problem set so we'll also take a look in this week about the the at the field of cryptography cryptanalysis the notion that you can uh encipher information in such a way that people can't read your messages but if clever enough perhaps you can in fact crack what are otherwise secret messages in uh week three will we then look at some basic fundamentals of computer science like searching and sorting and we'll actually look at uh this notion of recursion how to debug programs in short will take things up to the level of problem solving and not so much about mere syntax and implementing short little cookie cutter programs in week four will we Implement uh introduce more sophisticated topics still what does it mean to manage memory what does it mean to run out of memory how what does it mean to actually Segal if you've heard this expression in odds are you haven't but very bad things happen and frankly by terms and will you understand terms like my code seg faed which actually uh is uh generally not going to be a good thing but then again we'll introduce some domain specific stuff so actually one of my internships during graduate school was to work for the local middle sex County District Attorney's Office doing forensic in investigations in a digital sense the local Mass state police would bring to our office hard drives and floppy discs and sometimes for unknown reasons mice and keyboards and we would be tasked with finding evidence now it turns out and maybe just in FYI that uh the criminals in in uh Cambridge Massachusetts at least not necessarily that clever very often our forensic analyses boil down to booting the computer up and double clicking on the My Documents folder and there in lay the evidence but what we'll do in this week is actually give you a sense of what it means to store information on a hard drive on a flash drive and why can otherwise private information be disclosed to third parties when you drop off a computer to be repaired or when you uh even discard it well someone might very well be sifting through those hard drives and it's really not that hard to find data if you know how to look for it well in week seven we'll
PHP look at more sophisticated data structures again tools techniques that you can use allaha phone books and Allah s uh searching huge data sets much more intelligently and the week's problem set will task you a bit competitively to see just how fast the code you can write is and how little memory you can use toward terms end though will we take things up to a higher level in terms of programming languages and put C behind us and introduce a web programming language known as PHP one of the popular languages these days face much of Facebook is still written in PHP at least outward facing and it's just a very easy language to learn quickly once you already know another so with PHP will we be able to solve problems and Implement websites that do interesting things the news site I showed you the event site the shuttle boy site all of those are happen to be written in PHP but by no means is that prerequisite what you'll also find throughout this course is that you're not going to exit this course knowing see you're not going to exit this course knowing PHP those are not interesting skills to claim but knowing how to program knowing how to use data structures and algorithms in an interesting way that's a compelling story even I all these years later throughout college and graduate school the only time I ever learned a language was probably in cs50 where it was still taught in C and cs51 which is one of the successor courses everywhere along the way since has been H go learn this language and then work on this problem set because the computer science is not supposed to be about here's a language let's spend seven weeks teaching you where the semicolons are there are much more interesting ideas out there databases for one and in this week two we'll be introduced you to this uh query language called SQL that will allow you to actually store information in data bases and actually Implement some fairly interesting final projects the week after we'll be look at what's called client side programming doing interesting things on a user's computer taking advantage of their CPU Cycles doing things Alla Google Maps and these websites that actually use JavaScript which is a language we'll introduce to let you do client side things make more interesting more sophisticated user
Clientside Programming interfaces but that at the end of the day have to be really mindful when implemented of a lot of sticky issues like Network speeds and network performance and security so it's not about again just coding something up that's fun to use or pretty to look at but actually thinking about the design that'll be the interesting process and then the end result aesthetically will be often a really neat toy to show yourself for a friend and then we'll look a little bit at Hardware we're going to take for granted that there are these physical boxes throughout most of this semester that will do what we tell them to do but how are they doing that so we'll actually take a peek underneath the hood and talk about what a compiler really is what a CPU really is and actually consider what's making all of this fanciness from stupid YouTube videos on down possible so what are the expectations attending lectures and sections uh completing nine problem sets assigned roughly weekly two quizzes of fin project and there is in fact no final exam grades it's always a question uh broken down as follows here you can
Grades take the course pass fail but let me say here and I'll H be happy to say it as many times I personally care relatively little about grades I think they are wonderful well they are a useful pedagogical tool with which to motivate and unfortunately sometimes demotivate but you'll find in this course that at the end of the day um it's more about seeing how far you can go from week zero to week 12 as we say in the syllabus then it is about absolutely ranking all students in this course so if you're coming into this course among those less comfortable though a large demographic do not assume that that's automatically putting you say in the lower third of the so-called distribution at terms end do I sit down with the TFS and discuss each and every one of the students we take into account the cons uh where a student come came from what kind of trajectory they were actually on and so at the end of the day please focus more on and I don't mean to sound too Grand the process of learning and less on the numerics and you'll actually see that we grade problem sets in particular very coarsely whereby along three axes you will get a score of 1 2 3 four or five where three is in fact good three is not c three is good four is better five is best but more on that as the problem sets are released so the course's website is where you will find as in most cases a whole lot of uh useful things if not silly things too and we have the luxurious computer scientists is have implemented it ourselves over the course of the semester will you see various new features rolling out you'll find over the course of the semester that the bulletin board is a wonderful place certainly in a course of this size to turn when you have questions about the problem set questions about uh some computer science concept you'll be able to check your grades download all handouts in advance of lecture typically while I post the slides if you're the type who wants to scribble on notes but as you've seen usually I shy away from long lists of detail and more right pictures of cats and other uh visual cues so you'll find too that we will often provide printouts of code when we actually think it particularly advantageous to write right on the paper software videos will be available usually around 1 to two to 3 days maximally after each lecture so the courses are being filmed and every lecture will go online in various formats including Quicktime and MP3s for downloads to iPods and such and also will you find a link to what we call the virtual terminal room which as you'll see is related to Virtual Office hours books are expensive in the computer world and also not that useful um they are on reserve they are on the shelves of the coupe although we're told that last year they ordered like 120 books for the course and 30 were actually purchased um but this perhaps speaks to the fact that there exists places like amazon.com so if you are the type who actually enjoys the the sort of support structure that a book provides if you like to read up more than say the course is typical materials offer by all means you procure one or more of the books that we recommend here and discuss more in detail in the syllabus But realize there are so many resources that this course provides in printed form and electronic form and my God there's the whole internet out there books are not something that are required for this particular course lectures in general will be Mondays and Wednesdays except for this Friday and next Friday simply because of shopping period and labor day so we'll next meet this Friday next Wednesday next Friday but thereafter this is just a Monday Wednesday course so this little visual cue here is to remind me that yes we do distribute videos in quick time formats MP3s fun ways that you can if you're actually this type maybe in the 14% watch a computer science lecture on your iPod but um it's uh it's uh it reminded me of that the fact that that it terms in last year the course culminates in final projects for which students can design most anything they want and we actually had some students tackle iPhone applications um some one of these at least is now in the Apple Store it's called Rover uh it's been adopted essentially by Harvard student agencies and it's the iPhone version of The Unofficial Guide to Life at Harvard they did a brilliant job um I bring this slide up too just to point out what other Technologies might very well be down the road some of you may have seen this before but just to give you a
MacBook Wheel teaser of apparently what's in the pipeline I thought I would offer this brief distraction [Applause] here the mab meal that sharing you last mon away the has thanks Andrea say goodbye on the keyboard and hello to the future of laptop computers with the MacBook wheel Apple has replaced the traditional keyboard with a Sleek touch sensitive click wheel Apple CEO Steve Jobs introduced the product yesterday at the annual Mac Expo senior product innovator Brian Gilman says the MacBook wheel will make typing a thing of the past at Apple our philosophy is create products that are simple to use and nothing's more simple than a single giant button Gilman showed me how the revolution new computer works just uh open the in type alphabet menu here scroll to the letter you need see and Center click to select it then click again to capitalize and uh repeat this process for each new letter it couldn't be simpler huh you can also let the predictive sentence technology complete the sentence for you Gilman says the MacBook wheel has also simplify the organization of files so searching your hard drive will be a snap just press both sides of the wheel concurrently and Center click and there you have an alphabetical listing of every file on your hard drive everything is just a few hundred clicks away apple is calling the MacBook wheel the most intuitive product ever designed here at Apple we like to think that we're giving customers features they don't even realize they want yet while the MacBook wheel won't hit the shelves for another 3 to 15 months many Apple users already have it on their wish list I'll buy almost anything if it's shiny and made by Apple Alex Zin was one of the lucky few to get to try out a Mac wheel and spent 45 minutes typing an email to his friend I never really realized how much I hated keyboards until I saw this thing I like have the email automatically says sent from a Macbook wheel that way people know you have one with a price tag of just under $2,600 for the lowest end MacBook wheel it is an investment but the super thin laptop features numerous Innovations like the new ultra thin hummingbird battery which can power the MacBook wheel for a full 19 minutes before needing to be recharged and the computer is virtually unbreakable unless dropped or hit but Apple isn't resting on its Laurels Brian Gilman said they are hard at work on the next generation of the MacBook wheel which will be 4 oz lighter due to its lack of screen hard driver wheel for the onion News Network I'm Jeff Tate thank you for that Jeff it remains to be seen if the wheel will catch on in the business world where people use computers for actual work and not just around moving on police warning so I've seen that thing probably a half a dozen times now including once at like 2:00 a.m. last night and I was scrolling down on YouTube and like literally an hour prior some guy had in all seriousness posted just a wheel that's the stupid stest product I've ever seen and then the rants ensued on the thread thereafter so besides lectures
Sections there are also sections and it is your teaching fellow in the courses course assistant that you will get to know very well over the course of this semester sectioning won't begin for a week or so's time more on that in the in the lectures to come but know that the course will have several different tracks of sections much like first nights has for music sections targeted more at those uh those less comfortable those more comfortable and those somewhere in between and what we also offer most Sunday nights before a problem set is due on this following Friday is what we call code walkthroughs where one of the courses teaching fellows will lead a session targeted specifically at the week's problem set and will'll help you answer the question where do I begin how should I approach this and that too will be filmed and made available online and always linked on the course's website so this course has a huge staff our staff is larger than Harvard's average class size we have over 50 people involved in the production of this course on a weekly basis some of them teaching fellows uh who hold sections grade work uh hold office hours and more course assistants who are former students who are offering on a volunteer basis in fact multiple hours of Office hours in the computer lab per week system administrators folks doing all of our av and video production someone who will actually be taking notes for you so it is actually my opinion that um scribbling down most every word someone like me says is not a very good use of one's time much more interesting I think to actually engage with what's on the screen what's being presented and so what we will do as a course is post PDFs online within a couple of days of lectures of scribe notes which is essentially an authoritative version of course notes unedited but rather documenting what went H what went on in lecture that day thereby hopefully freeing your minds and pencils from jotting uh a great deal of information down we have some of the team here most of our team is actually shopping courses but if a few of you guys would like to come on stage for a moment with our head teaching fellow and assistant head teaching fellow allow me to ask the latter to say a quick hello and as these guys come Out Come Up In Absentia allow me to say that also on
Staff staff this year besides the folks you see here are Alex Alice Andrew batou Charlotte Chris Dan Dan Daniel David David David uh Derek Dev Deee Doug Drew Erica Phil Glenn Greg Janice Jason Jean Jeff Jesse John John Jonathan Jordan Josh Kareem Kelly Ken Kent cu Lee Madura Marta Matthew Michael Michelle Mike Mike Nathan Patrick Peter Payton Rose Saba Sanjay Shannon Stacy Ted wellie Y and me so our course is teaching fellows and course assistants jansu and Yuki would you like to say a quick hello well um hi it's definitely a great honor to be here back here for the third time and if you're one of those who are like less comfortable can um I think I can project my one no no app uh if you're one of those best experience if you had no experience whatsoever there's no need to be afraid I walked in here two years ago with no experience whatsoever and I thought that I was like down there and that I was I was sure that I was going to fail the class and well I came back for the third time um I did not fail the class uh but um this course is great because it has such a good Community as you as you can tell by the names listed uh by David we all your TFS are here and CA are here to help you so if you have any questions at all times just come up to us and the not taking this class just because it's hard is not a good excuse um so hi hi so um yeah um well both as a student and TF I've really enjoyed being part of this course and um even though it's a kind of course that requires a lot of work from you we put a lot of work in it for you as well to make it as enjoyable and fun as possible so um we really hope that all of you stay and take part in this very special experience thanks so you will find thank you to all of you you'll meet them in the hallway in just a few minutes as well you'll find that this course perhaps more so than many is a very much shared experience this is not a competitive course this is not your Premed course this is a course which ultimately yes is about doing independent work as you'll see each week by way of the problem sets but you can't help but get close to someone when you're fighting with some bug and banging your head against the the computer screen proverbially to uh proverbially to try to track down some bug and I think you'll find that past students will concur that you exit this course with both a lot of friends on among students and also on staff so where does that happen well within office hours in the basement of the science center there's some large computer labs and we pretty much take them over nights a week these won't start for some time and this to be honest is perhaps the most beautiful
Support picture of the science center I've ever seen it does not look like that on the inside um but it is a place where a good percentage of students do choose to spend time to get one-on-one assistance with each of the week's problem sets each week we will offer more than 100 person hours of assistance one-on-one in the science center per the schedule that will eventually go online and for those of you who live say in the quad or and Ma or who just don't want to Trek all the way to the Science Center to ask that quick question we also offer what are called Virtual Office hours much like remote technical support will you be able to log into a glorified chat room in which yes you can type back and forth with the TF or CA but you can also share your screen or share control of your mouse with them subject to your consent so that they can help you troubleshoot any problem or any question you have remotely to give you a sense of what's involved in the course these are statistics from last year so you will I think it's quite fair to say work your ass off in this course but per my promise from the start this is one of those experiences that I don't think a typical student regrets if you flip through for instance the Q guide forms that are all on the course's website you'll find that only by putting in the time to a course like this do you really exit having felt like you got something out of it and frankly might very well have emerged even smarter so what does it mean to actually write programs and Implement problem sets well the first problem set last year a quick retrospective here was to implement your very own program in scratch and we spend just the first week there and the goal is to implement your own game or animation or art or anything that appeals to you in week one do you then Implement some basic C programs to get acclimated to a more traditional programming environment at the command line at Linux so you get comfortable with some of these Basics that will certainly serve you well in the long run last year's problem set two was about cryptography we gave students the opportunity to implement some ciphers algor that let them encrypt information and we also offered some students the opportunity to do the opposite each problem many problem sets are offered as you'll see in two additions a standard edition that we expect almost everyone to do say 90% of the class and then a hacker Edition which presents the material from a more sophisticated angle expects perhaps a bit more clever work from those more experienced and for this one did those students get handed in the hacker Edition uh pre-existing usernames and passwords in encrypted form and and they had to figure out what those passwords were we actually got a little in trouble for this 2 years ago because all of a sudden FAS Computer Services saw like 50 people running a crack program on nice uh. f. harvard.edu so they now have been given a heads up for programs like that uh last year students implemented the game of 15 not all that much fun to play as a party favor moving the numbers up down left right but a really stepping stone to implementing something interactive that involves a human and the hacker Edition for this one had students implement ing god mode which actually solved this thing for the human maybe cheat mode perhaps is the more AP term and then Sudoku which was a step up toward that where we provided the students you with a framework with a whole bunch of code that you needed to First understand before taking things the final mile and implementing some of the remaining functionality and then we dabbled in forensics and this grew out of a real world experience of um between me and a friend for this problem set last year this buddy and I who's he being a particularly good photographer stroll around campus and we shot photographs of uh uh unique but ENT non-obvious but identifiable places on campus and this was using his digital camera all these jpegs got stored on a compact flash card or whatnot and then I accidentally formatted the thing erased it well it turns out formatting something erasing something usually means neither it just means doing a little bit of work to make the human think their data has been erased but in reality it really hasn't it's just been forgotten and so we tasked last year students with writing a program in C to actually recover these photos for my friend we gave everyone a forensic image so to speak a big file representing that compact flash card and they had to recover the several dozen photographs and they also had solve this little murder mystery we provided folks with this image here those of you who might have seen this before might be doing that squinting thing right now where you're trying to look through the picture well you look pretty awkward because this is not a magic eye puzzle this is just random red noise that actually um has behind it an actual message and uh it turns out that uh I think it was Colonel let's see I got my little solution here last year it was Colonel Mustard in the study with the Candlestick and this was the murder message recovered by students who wrote code to do so and then in problem set six last year we challenged students with implementing the fastest spell checker possible and what did we mean by that well we handed the students a big text file containing 140 plus thousand words English words and we said write a program that loads all these words into memory but very quickly and very efficiently can tell us yay or nay is this document perfectly spelled or are there errors and what we provided was a testing framework a harness that students if they wanted to compete could run their code against some benchmarks against some testing programs that we wrote and then ranked on the course's website from fastest to slowest uh were the running times the amount of time it took for each student's Cod code to actually uh execute completely opt in it's by no means required and we we took um a bullet for the team and made sure that one of our own teaching fellows uh intentionally I think was at the very bottom of the list so there was definitely a lower bound but odds the funny thing was and we saw this in the uh in the Q guide evaluations this problem set of all things was apparently the one that people sunk the most time into not because it took any longer than all the other p sets but they would come back from like dinner look at the board and realize damn my friend my roommate just ever so slightly inched higher than me and so it incentivized people if only to one up their friends and roommates and problems at seven last year we asked students to implement their own eade like website whereby you had to create a website using that language called PHP a database called MySQL that actually lets people log in and then manage a portfolio of stocks buy stocks quote unquote sell stocks quote unquote get stock quotes and from where well we have the students we had the students patch into Yahoo f where they grabbed nearly real-time stock quotes to actually simulate the process of buying and trading stocks unfortunately some students perhaps some economics Majors or just folks with too much free time figured out last year how to game the system so even though we gave everyone $10,000 virtual dollars I think our our uh our winner turned teaching fellow this year actually right don't don't push them away make them one of your own um $4 billion something like that ridiculous um turns out we weren't really checking whether or not people were trading after hours and it turns out that also hau's stock quotes are not in fact perfectly real time which means if you just have a real eade account you can see the future and see where the stocks are going so apparently you can exploit that if uh you put your mind to it and then in problem set 8 the course's final problem set last year did we have students Implement a mashup where they took Google news and Google Maps and mash them together using JavaScript PHP and SQL in such a way that they had a website that they could find all of the local news from whether it's ZIP code 02138 or 90210 and you would actually pull the local current event articles via this thing called XML and integrate it into the view of a Google map and then at very course's end was the true climax of the course this course culminates in final projects which ultimately will be your opportunity to design your very own piece of software designed by you or two or three friends and the course then climaxes with the uh uh new and this with the second annual computer science 50 Fair which last year was an exhibition across the street in one of the engineering buildings uh with 300 laptops a top tables popcorn was popping music was playing uh stress balls with cs50's logo were being thrown around and this was an opportunity for our 300 plus students to exhibit their final projects not only to each other but also to some uh 900 attendees in total and we also invited some recruiters as well so that is what you have to look forward in this course you also have C to look forward to in the hallway this is cs50 and we will see you on Friday [Music] [Applause] 